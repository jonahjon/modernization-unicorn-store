---
AWSTemplateFormatVersion: "2010-09-09"
Description: This template will launch the Player Account Environment for .Net Modernization Workshop.
Parameters:
  UnicornStoreDBUsername:
    Type: String
    Description: UnicornStore Database Username for RDS
    Default: "awssa"
  UnicornStoreDBPassword:
    AllowedPattern: "^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)"
    ConstraintDescription: Must contain only alphanumeric characters with at least one capital letter and one number
    Description: UnicornStore Database Username for RDS
    MaxLength: '41'
    MinLength: '8'
    Type: String
    Default: BBTh123ca
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.0.0/24
    Public2:
      CIDR: 10.0.1.0/24
    VPC2:
      CIDR: 10.1.0.0/16
    Public3:
      CIDR: 10.1.0.0/24
    Public4:
      CIDR: 10.1.1.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: Name
        Value: "Demo VPC"
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  2ndVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC2
        - CIDR
      Tags:
      - Key: Name
        Value: "2nd Demo VPC"
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  VPCPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Properties:
      VpcId: !Ref VPC
      PeerVpcId: !Ref 2ndVPC
  PeeringRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      RouteTableId: !Ref 2ndPublicRouteTable
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  PeeringRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC2
        - CIDR
      RouteTableId: !Ref PublicRouteTable
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]      
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public2
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: 2ndVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]      
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public3
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  PublicSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: 2ndVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]      
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public4
        - CIDR
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  2ndInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  2ndGatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: 2ndVPC
      InternetGatewayId:
        Ref: 2ndInternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  2ndPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: 2ndVPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  2ndPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: 2ndGatewayToInternet
    Properties:
      RouteTableId:
        Ref: 2ndPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: 2ndInternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: 2ndPublicRouteTable
  PublicSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet4
      RouteTableId:
        Ref: 2ndPublicRouteTable
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  2ndPublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: 2ndVPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackName
      - Key: Network
        Value: Public
  InboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      Protocol: -1
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  2ndInboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: 2ndPublicNetworkAcl
      RuleNumber: '100'
      Protocol: -1
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      Protocol: -1
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  2ndOutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: 2ndPublicNetworkAcl
      RuleNumber: '100'
      Protocol: -1
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  PublicSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: PublicNetworkAcl
  PublicSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      NetworkAclId:
        Ref: PublicNetworkAcl
  PublicSubnet3NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      NetworkAclId:
        Ref: 2ndPublicNetworkAcl
  PublicSubnet4NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet4
      NetworkAclId:
        Ref: 2ndPublicNetworkAcl
  Cloud9:
    Type: AWS::Cloud9::EnvironmentEC2
    DependsOn: PublicSubnet1
    Properties: 
      Description: Cloud9 Instance used for workshop
      InstanceType: t3.small
      Name: Flux-workshop
      SubnetId: 
        Ref: PublicSubnet1
  UnicornStoreRDSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: UnicornStoreRDSSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 1433
        ToPort: 1433
        CidrIp:
          Fn::FindInMap:
            - SubnetConfig
            - VPC
            - CIDR
      - IpProtocol: tcp
        FromPort: 1433
        ToPort: 1433
        CidrIp:
          Fn::FindInMap:
            - SubnetConfig
            - VPC2
            - CIDR
      - IpProtocol: tcp
        FromPort: 1433
        ToPort: 1433
        CidrIp: "0.0.0.0/0"
      VpcId: 
        Ref: VPC
  2ndUnicornStoreRDSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: 2ndUnicornStoreRDSSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 1433
        ToPort: 1433
        CidrIp:
          Fn::FindInMap:
            - SubnetConfig
            - VPC
            - CIDR
      - IpProtocol: tcp
        FromPort: 1433
        ToPort: 1433
        CidrIp:
          Fn::FindInMap:
            - SubnetConfig
            - VPC2
            - CIDR
      VpcId: 
        Ref: 2ndVPC
  UnicornStoreRDS:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.medium
      Port: 1433
      PubliclyAccessible: 'true'
      StorageType: gp2
      MasterUsername: !Ref UnicornStoreDBUsername
      MasterUserPassword: !Ref UnicornStoreDBPassword
      Engine: sqlserver-web
      EngineVersion: 14.00.3223.3.v1
      LicenseModel: license-included
      MultiAZ: false
      DBSubnetGroupName: !Ref UnicornStoreSubnetGroup
      VPCSecurityGroups:
      - Fn::GetAtt:
        - UnicornStoreRDSSecurityGroup
        - GroupId
      Tags:
        -
          Key: "Name"
          Value: "UnicornStoreDB"
  UnicornStoreSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: UnicornStore-SubnetGroup
      SubnetIds:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
  UnicornStoreECR:
    Type: "AWS::ECR::Repository"
    Properties:
     RepositoryName : modernization-unicorn-store
  UnicornStoreCloudwatchLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: UnicornStore
      RetentionInDays: 30
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ecs-tasks.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      Policies:
        -
          PolicyName: RetrieveUnicornSecret
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
             - Effect: Allow
               Action:
               - secretsmanager:GetSecretValue
               Resource:
                 - !Ref UnicornStoreDBSecret
                 - !Ref DefaultAdminPasswordSecret
                 - !Ref DefaultAdminUsernameSecret         
      RoleName: "UnicornStoreExecutionRole"
  UnicornStoreLbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: UnicornStoreLbSecurityGroup
      GroupDescription: Security group the the Unicornstore Application Load Balancer
      SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: 80
         ToPort: 80
         CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  2ndUnicornStoreLbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: 2ndUnicornStoreLbSecurityGroup
      GroupDescription: Security group the the Unicornstore Application Load Balancer
      SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: 80
         ToPort: 80
         CidrIp: 0.0.0.0/0
      VpcId: !Ref 2ndVPC
  UnicornStoreTaskSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: UnicornStoreTaskSecurityGroup
      GroupDescription: Security group the the Unicornstore Fargate Task
      VpcId: !Ref VPC
  2ndUnicornStoreTaskSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: 2ndUnicornStoreTaskSecurityGroup
      GroupDescription: Security group the the Unicornstore Fargate Task
      VpcId: !Ref 2ndVPC
  UnicornStoreTaskSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref UnicornStoreTaskSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref UnicornStoreLbSecurityGroup
  2ndUnicornStoreTaskSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref 2ndUnicornStoreTaskSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref 2ndUnicornStoreLbSecurityGroup
  UnicornStoreLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: UnicornStore-LB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref UnicornStoreLbSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: UnicornStore-LB
      Type: application
      IpAddressType: ipv4
    DependsOn: UnicornStoreLbSecurityGroup
  2ndUnicornStoreLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: 2ndUnicornStore-LB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref 2ndUnicornStoreLbSecurityGroup
      Subnets:
        - !Ref PublicSubnet3
        - !Ref PublicSubnet4
      Tags:
        - Key: Name
          Value: 2ndUnicornStore-LB
      Type: application
      IpAddressType: ipv4
    DependsOn: 2ndUnicornStoreLbSecurityGroup
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: UnicornStoreCluster
  UnicornStoreDBSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: UNICORNSTORE_DBSECRET
      Description: UnicornStoreDB RDS Secret
      SecretString:
        !Join
        - ''
        - - '{"username":'
          - !Sub '"${UnicornStoreDBUsername}",'
          - '"password":'
          - !Sub '"${UnicornStoreDBPassword}",'
          - '"engine":'
          - '"sqlserver",'
          - '"host":'
          - !Sub '"${UnicornStoreRDS.Endpoint.Address}",'
          - '"port":'
          - !Sub "${UnicornStoreRDS.Endpoint.Port},"
          - '"dbInstanceIdentifier":'
          - !Sub '"${UnicornStoreRDS}"'
          - '}'
  DefaultAdminPasswordSecret:
      Type: "AWS::SecretsManager::Secret"
      Properties:
        Name: DefaultAdminPassword
        Description: UnicornStore DefaultAdminPassword
        SecretString: Secret1*
  DefaultAdminUsernameSecret:
      Type: "AWS::SecretsManager::Secret"
      Properties:
        Name: DefaultAdminUsername
        Description: UnicornStore DefaultAdminUsername
        SecretString: Administrator@test.com
    
